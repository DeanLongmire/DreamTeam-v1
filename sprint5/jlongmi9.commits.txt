controllers/global_leagues.js
186632ac (jlongmi9          2023-05-02 13:25:19 -0400  19)     get_path((path) =>{
4ed5e4eb (jlongmi9          2023-05-08 23:21:11 -0400  23)                 if(picPath != null){
77d4869c (jlongmi9          2023-05-06 10:31:50 -0400  29)                     adminId: adminID,
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  46)         db.display_all( (league_names,league_sports,league_ids) => {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  49)                 sports: league_sports,
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  50)                 ids: league_ids
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  69)           const leagueData = {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  70)             id: uwid.id
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  71)           }
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  72)           res.send(leagueData);
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400  86)     }); 
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400  93) 
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400  94)     get_path((path) => {
4ed5e4eb (jlongmi9          2023-05-08 23:21:11 -0400 116) const update_profile_picture = (req, res) => {
4ed5e4eb (jlongmi9          2023-05-08 23:21:11 -0400 121)         get_path((path) => {
4ed5e4eb (jlongmi9          2023-05-08 23:21:11 -0400 133)     console.log(data);
4ed5e4eb (jlongmi9          2023-05-08 23:21:11 -0400 147) 
4ed5e4eb (jlongmi9          2023-05-08 23:21:11 -0400 157) 
4ed5e4eb (jlongmi9          2023-05-08 23:21:11 -0400 158) module.exports = {get_league, show_all, create_league, delete_league, update_name, update_sport, update_profile_picture, storePhoto, encodePhoto}

controllers/global_players.js
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400   1) const global_players = require("../Players/global_players_db.js");
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400   2) const global_users = require("../Users/global_users_db.js");
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400   7) let usersDb = new global_users.users_dbmanager;
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400   8) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  25) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  26)             let data = {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  27)                 username: username,
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  28)                 id: ID,
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  29)                 teamId: Team_ID,
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  30)                 pos: position
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  31)             }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  32) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  33)             res.send(data);
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  38) const get_players_on_team = (req, res) => {
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  39)     const { teamId } = req.params;
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  40) 
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  41)     get_path((path) => {
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  42)         db.open(path);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  43)         db.get_players_on_team(teamId,(usernames,positions,ids,TDs,catches,tackles,goals,saves,hits,RBIs,errors) => {
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  44)             db.close();
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  45)             const players = {
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  46)                 usernames: usernames,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  47)                 positions: positions,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  48)                 ids: ids,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  49)                 TDs: TDs,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  50)                 catches: catches,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  51)                 tackles: tackles,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  52)                 goals: goals,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  53)                 saves: saves,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  54)                 hits: hits,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  55)                 RBIs: RBIs,
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  56)                 errors: errors
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  57)             }
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  58)             if(players === "No players")
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  59)             {
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  60)                 res.status(201).send(players);
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  61)             }
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  62)             else
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  63)             {
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  64)                 res.status(200).send(players);
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  65)             }
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  66)         })
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  67)     }); 
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  68) }
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  69) 
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400  87)     get_path((path) => {
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400  89)         db.insert(uwid.player,uwid.username,uwid.id,uwid.teamId,uwid.pos,0,0,0,0,0,0,0,0,() =>{
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400  91)             usersDb.open(path);
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400  92)             usersDb.update_playerId(uwid.id,uwid.userId,() => {
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400  93)                 usersDb.close();
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400  94)                 console.log("Got to here");
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400  95)                 res.send('Player added to database');
b4c74670 (jlongmi9 2023-05-02 13:04:45 -0400  96)             })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 141) const increment_TD = (id, newTDs, callback) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 142)     if(newTDs == undefined) {callback();}
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 143)     else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 144)     {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 145)         get_path((path) => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 146)             //db.open(path);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 147)             db.increment_TD(newTDs,id,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 148)                 callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 149)             })
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 150)         })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 151)     }
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 152) }
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 153) 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 154) const increment_catches = (id, newCatches, callback) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 155)     if(newCatches == undefined) {callback();}
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 156)     else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 157)     {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 158)         get_path((path) => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 159)             //db.open(path);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 160)             db.increment_catches(newCatches,id,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 161)                 callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 162)             })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 163)         })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 164)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 165) }
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 166) 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 167) const increment_tackles = (id, newTackles, callback) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 168)     if(newTackles == undefined) {callback();}
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 169)     else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 170)     {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 171)         get_path((path) => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 172)             //db.open(path);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 173)             db.increment_tackles(newTackles,id,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 174)                 callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 175)             })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 176)         })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 177)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 178) }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 179) 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 180) const increment_goals = (id, newGoals, callback) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 181)     if(newGoals == undefined) {callback();}
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 182)     else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 183)     {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 184)         get_path((path) => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 185)             //db.open(path);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 186)             db.increment_goals(newGoals,id,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 187)                 callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 188)             })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 189)         })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 190)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 191) }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 192) 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 193) const increment_saves = (id, newSaves, callback) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 194)     if(newSaves == undefined) {callback();}
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 195)     else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 196)     {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 197)         get_path((path) => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 198)             //db.open(path);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 199)             db.increment_saves(newSaves,id,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 200)                 callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 201)             })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 202)         })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 203)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 204) }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 205) 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 206) const increment_hits = (id, newHits, callback) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 207)     if(newHits == undefined) {callback();}
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 208)     else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 209)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 210)         console.log(newHits);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 211)         get_path((path) => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 212)             //db.open(path);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 213)             db.increment_hits(newHits,id,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 214)                 callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 215)             })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 216)         })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 217)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 218) }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 219) 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 220) const increment_RBIs = (id, newRBIs, callback) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 221)     if(newRBIs == undefined) {callback();}
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 222)     else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 223)     {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 224)         get_path((path) => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 225)             //db.open(path);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 226)             db.increment_RBIs(newRBIs,id,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 227)                 callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 228)             })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 229)         })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 230)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 231) }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 232) 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 233) const increment_errors = (id, newErrors, callback) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 234)     if(newErrors == undefined) {callback();}
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 235)     else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 236)     {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 237)         get_path((path) => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 238)             //db.open(path);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 239)             db.increment_errors(newErrors,id,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 240)                 callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 241)             })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 242)         })
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 243)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 244) }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 245) 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 246) const promise_stats = (id, newStats, callback) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 247)     //About to be callback hell but oh well, gotta do what ya gotta do
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 248)     increment_TD(id,newStats.TDs,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 249)         increment_catches(id,newStats.catches,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 250)             increment_tackles(id,newStats.tackles,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 251)                 increment_goals(id,newStats.goals,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 252)                     increment_saves(id,newStats.saves,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 253)                         increment_hits(id,newStats.hits,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 254)                             increment_RBIs(id,newStats.RBIs,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 255)                                 increment_errors(id,newStats.errors,() => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 256)                                     callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 257)                                 });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 258)                             });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 259)                         });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 260)                     });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 261)                 });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 262)             });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 263)         });
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 264)     });
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 265) }
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 266) 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 267) const increment_stats = (req, res) => {
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 268)     const { id } = req.params;
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 269)     const newStats = req.body;
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 270) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 271)     console.log("\n\nSTART\n");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 272) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 273)     get_path((path) => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 274)         db.open(path);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 275)         promise_stats(id,newStats,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 276)             db.close();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 277)             res.send("Stats Incremented");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 278)         });
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 279)     })
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 280) }
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 281) 
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 282) module.exports = {get_player, get_players_on_team, show_all, create_player, delete_player, update_name, update_position, increment_stats}

controllers/global_teams.js 
412041e8 (jlongmi9     2023-05-04 22:06:45 -0400  23)     console.log(id)
412041e8 (jlongmi9     2023-05-04 22:06:45 -0400  24)     
1685cc33 (jlongmi9     2023-05-04 17:28:03 -0400  27)         db.get_all(id, (name, ID, P_ID, A_ID, sport, num_players, W, L, profile_picture) => {
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400  51)         db.get_all_with_id(leagueid, (names,ids,wins,losses) => {
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400  52)             const allData = {
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400  53)                 names: names,
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400  54)                 ids: ids,
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400  55)                 wins: wins,
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400  56)                 losses: losses
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400  57)             }
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400  59)             res.send(allData);
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400  61)     });
b70b5203 (jlongmi9     2023-05-04 16:52:38 -0400  66) 
6f512d67 (jlongmi9     2023-05-04 17:15:58 -0400  93)         db.insert(teamWid.teamName, teamWid.id, teamWid.P_ID, teamWid.creator,teamWid.sport, teamWid.size, 0, 0, null, () =>{
0d4fa490 (jlongmi9     2023-05-02 12:34:44 -0400  96)             const resData = {
0d4fa490 (jlongmi9     2023-05-02 12:34:44 -0400  97)                 teamId: teamWid.id
0d4fa490 (jlongmi9     2023-05-02 12:34:44 -0400  98)             }
0d4fa490 (jlongmi9     2023-05-02 12:34:44 -0400  99)             res.status(200).send(resData);

controllers/global_users.js 
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400  37)             //console.log("Got " + sessData.username);
2328f8a1 (jlongmi9 2023-05-01 16:55:24 -0400  42)                 db.get_all(id, (username, first_name, last_name, playerID, teamID, leagueID, email, bio, pos, picPath) => {
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400  43)                     //console.log(username + " " + first_name + " " + last_name + " " + playerID + " " + teamID + " " + email + " " + bio + " " + pos + " " + picPath)
2328f8a1 (jlongmi9 2023-05-01 16:55:24 -0400  56)                         leagueID: leagueID,
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400  63)                     console.log(`\nSent user ${userData.username}'s data to client\n`);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400  79)     //console.log(user.emailField + " " + user.passwordField);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400  84)             //console.log("Got password: "+ password + " from id " + id);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400  87)                 console.log(`The email "${user.emailField}" was not found\n`);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400  92)                 //console.log(hash_pass + "\n" + password);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400  95)                     //console.log("Logged in");
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 110)                             //console.log(`Session created for ${req.session.user.username} with ID ${req.session.id}`);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 117)                                 console.log(`\nUser ${user.username} was logged in\n`);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 125)                     console.log("An incorrect Password Was Recieved\n");
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 156)             //console.log("in controllers: " + path)
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 179)         //console.log(uwid);
8aba686c (jlongmi9 2023-05-01 16:26:17 -0400 185)         db.insert(uwid.id,uwid.username,uwid.email,uwid.password,uwid.firstName,uwid.lastName,uwid.playerID,uwid.teamID,uwid.leagueID,uwid.bio,uwid.position,null, () => {
8aba686c (jlongmi9 2023-05-01 16:26:17 -0400 186)             db.get_all(uwid.id, (un,fn,ln,pID,tID,lID,email,bio,pos) => {
8aba686c (jlongmi9 2023-05-01 16:26:17 -0400 194)                     leagueID: lID,
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 201)                     //console.log(`Session created for ${req.session.user.username} with ID ${req.session.id}`);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 208)                         console.log(`\nUser ${uwid.username} was created\n`);
363bf311 (jlongmi9 2023-05-07 20:39:03 -0400 219) const delete_user = (req, res) => {
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 231) const delete_session = (req, res) => {
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 232)     const { sessId } = req.params;
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 233)     
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 234)     get_path_session((sessionPath) => {
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 235)         sess.open(sessionPath);
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 236)         sess.delete_session(sessId, () => {
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 237)             sess.close();
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 238)             res.send("Session Deleted");
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 239)         })
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 240)     })
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 241) }
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 242) 
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 248)     //console.log(new_username + " " + id);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 265)     //console.log(new_email + " " + id);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 282)     //console.log(new_bio + " " + id);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 299)     //console.log(new_first_name + " " + id);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 316)     //console.log(new_lastname + " " + id);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 333)     //console.log(new_position + " " + id);
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 350)     //console.log(new_password + " " + id);
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 364) //for when a user joins a team, a player will be created
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 365) const update_player = (req, res) => {
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 366)     const { id } = req.params;
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 367)     const playerId = req.body.playerId;
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 368) 
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 369)     get_path((path) => {
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 370)         db.open(path);
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 371)         db.update_playerId(playerId,id, () => {
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 372)             db.close();
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 373)         });
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 374) 
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 375)         res.send('Player ID updated');
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 376)     });
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 377) }
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 378) 
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 379) //for when a user joins a team
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 380) const update_team = (req, res) => {
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 381)     const { id } = req.params;
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 382)     const teamId = req.body.teamId;
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 383) 
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 384)     get_path((path) => {
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 385)         db.open(path);
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 386)         db.update_teamId(teamId,id, () => {
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 387)             db.close();
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 388)         });
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 389) 
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 390)         res.send('Team ID updated');
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 391)     });
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 392) }
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 393) 
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 394) //for when a user joins a league
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 395) const update_league = (req, res) => {
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 396)     const { id } = req.params;
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 397)     const leagueId = req.body.leagueId;
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 398) 
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 399)     get_path((path) => {
a28a7f58 (jlongmi9 2023-05-01 22:51:53 -0400 400)         console.log(leagueId);
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 401)         db.open(path);
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 402)         db.update_leagueId(leagueId,id, () => {
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 403)             db.close();
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 404)         });
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 405) 
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 406)         res.send('League ID updated');
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 407)     });
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 408) }
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 409) 
ae78c6be (jlongmi9 2023-04-28 19:50:26 -0400 439)             //console.log("The file was saved!");
2328f8a1 (jlongmi9 2023-05-01 16:55:24 -0400 447)     console.log(picPath)
2328f8a1 (jlongmi9 2023-05-01 16:55:24 -0400 448) 
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 456) module.exports = { get_user, login, show_all, create_user, delete_user, delete_session, update_firstname, update_lastname, update_username, update_password, update_email, update_bio, update_position, update_player, update_team, update_league, update_profile_picture };

Back-End/Leagues/global_leagues_db.js 
a28a7f58 (jlongmi9       2023-05-01 22:51:53 -0400  30)                 if (err) {
a28a7f58 (jlongmi9       2023-05-01 22:51:53 -0400  31)                     console.error(err.message);
a28a7f58 (jlongmi9       2023-05-01 22:51:53 -0400  32)                 } else {
a28a7f58 (jlongmi9       2023-05-01 22:51:53 -0400  33)                     console.log("New row created in League table");
a28a7f58 (jlongmi9       2023-05-01 22:51:53 -0400  34)                 }
771d94ff (jlongmi9       2023-05-07 18:18:51 -0400  42)         const league_ids = [];
771d94ff (jlongmi9       2023-05-07 18:18:51 -0400  44)             this.sql = 'SELECT name,ID,sport FROM Leagues';
771d94ff (jlongmi9       2023-05-07 18:18:51 -0400  50)                     league_ids.push(row.ID);
771d94ff (jlongmi9       2023-05-07 18:18:51 -0400  52)                 callback(league_names,league_sports,league_ids);
4ed5e4eb (jlongmi9       2023-05-08 23:21:11 -0400  88)     update_profile_picture(new_pp, ID, callback){
4ed5e4eb (jlongmi9       2023-05-08 23:21:11 -0400  89)         this.sql = 'UPDATE Leagues SET profile_picture = ? WHERE ID = ?';
4ed5e4eb (jlongmi9       2023-05-08 23:21:11 -0400  94)     }

Back-End/Players/global_players_db.js
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400  14)         this.db.run('CREATE TABLE Players(name, username, ID, Team_ID, position, TDs, catches, tackles, goals, saves, hits, RBIs, errors)', (err)=>{
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400  25)     insert(name, username, ID, Team_ID, position, TDs, catches, tackels, goals, saves, hits, RBIs, errors, callback){
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400  27)             this.sql = 'INSERT INTO Players(name, username, ID, Team_ID, position, TDs, catches, tackles, goals, saves, hits, RBIs, errors) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)';
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400  28)             this.db.run(this.sql, [name, username, ID, Team_ID, position, TDs, catches, tackels, goals, saves, hits, RBIs, errors], (err)=>{
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400  52)                 if(row){callback(row.name,row.username,row.ID,row.Team_ID,row.position,row.TDs,row.catches,row.tackles,row.goals,row.saves,row.hits,row.RBIs,row.errors);}
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  57)     get_players_on_team(teamId, callback){
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  58)         let usernames = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  59)         let positions = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  60)         let ids = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  61)         let TDs = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  62)         let catches = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  63)         let tackles = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  64)         let goals = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  65)         let saves = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  66)         let hits = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  67)         let RBIs = [];
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  68)         let errors = [];
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  69)         this.db.serialize(()=>{
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  70)             this.sql = 'SELECT * FROM Players WHERE Team_ID = ?';
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  71)             this.db.all(this.sql,[teamId],(err,rows) => {
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  72)                 if(err){return console.error(err.message);}
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  73)                 if(rows.length === 0) {callback("No players");}
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  74)                 else if(rows) {
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  75)                     rows.forEach((row) => {
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  76)                         usernames.push(row.username);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  77)                         positions.push(row.position);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  78)                         ids.push(row.ID);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  79)                         TDs.push(row.TDs);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  80)                         catches.push(row.catches);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  81)                         tackles.push(row.tackles);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  82)                         goals.push(row.goals);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  83)                         saves.push(row.saves);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  84)                         hits.push(row.hits);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  85)                         RBIs.push(row.RBIs);
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  86)                         errors.push(row.errors);
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  87)                     });
0fb7e29d (jlongmi9 2023-05-08 16:06:07 -0400  88)                     callback(usernames,positions,ids,TDs,catches,tackles,goals,saves,hits,RBIs,errors);
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  89)                 }
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  90)             });
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  91)         });
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400  92)     }
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 115)     increment_TD(TDs, ID, callback){
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 116)         let updatedTDs;
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 117)         this.db.serialize(()=>{ 
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 118)             this.db.get('SELECT TDs FROM Players WHERE ID = ?',[ID],(err,row) => {
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 119)                 if(err)
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 120)                 {
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 121)                     console.log(err.message);
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 122)                     return;
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 123)                 }
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 124)                 if(row.TDs !== null)
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 125)                 {
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 126)                     updatedTDs = row.TDs + TDs;
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 127)                     this.db.run('UPDATE Players SET TDs = ? WHERE ID = ?',[updatedTDs,ID],(err) => {
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 128)                         if(err)
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 129)                         {
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 130)                             console.log(err.message)
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 131)                             return;
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 132)                         }
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 133)                         else
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 134)                         {
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 135)                             callback();
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 136)                         }
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 137)                     });
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 138)                 }
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 139)             });
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 140)         });
aec98c50 (jlongmi9 2023-05-06 11:43:04 -0400 141)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 142)     increment_catches(catches, ID, callback){
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 143)         let updatedCatches;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 144)         this.db.serialize(()=>{ 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 145)             this.db.get('SELECT catches FROM Players WHERE ID = ?',[ID],(err,row) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 146)                 if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 147)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 148)                     console.log(err.message);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 149)                     return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 150)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 151)                 if(row.catches !== null)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 152)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 153)                     updatedCatches = row.catches + catches;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 154)                     this.db.run('UPDATE Players SET catches = ? WHERE ID = ?',[updatedCatches,ID],(err) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 155)                         if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 156)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 157)                             console.log(err.message)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 158)                             return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 159)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 160)                         else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 161)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 162)                             callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 163)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 164)                     });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 165)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 166)             });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 167)         });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 168)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 169)     increment_tackles(tackles, ID, callback){
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 170)         let updatedTackles;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 171)         this.db.serialize(()=>{ 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 172)             this.db.get('SELECT tackles FROM Players WHERE ID = ?',[ID],(err,row) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 173)                 if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 174)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 175)                     console.log(err.message);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 176)                     return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 177)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 178)                 if(row.tackles !== null)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 179)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 180)                     updatedTackles = row.tackles + tackles;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 181)                     this.db.run('UPDATE Players SET tackles = ? WHERE ID = ?',[updatedTackles,ID],(err) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 182)                         if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 183)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 184)                             console.log(err.message)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 185)                             return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 186)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 187)                         else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 188)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 189)                             callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 190)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 191)                     });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 192)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 193)             });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 194)         });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 195)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 196)     increment_goals(goals, ID, callback){
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 197)         let updatedGoals;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 198)         this.db.serialize(()=>{ 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 199)             this.db.get('SELECT goals FROM Players WHERE ID = ?',[ID],(err,row) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 200)                 if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 201)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 202)                     console.log(err.message);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 203)                     return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 204)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 205)                 if(row.goals !== null)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 206)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 207)                     updatedGoals = row.goals + goals;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 208)                     this.db.run('UPDATE Players SET goals = ? WHERE ID = ?',[updatedGoals,ID],(err) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 209)                         if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 210)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 211)                             console.log(err.message)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 212)                             return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 213)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 214)                         else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 215)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 216)                             callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 217)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 218)                     });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 219)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 220)             });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 221)         });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 222)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 223)     increment_saves(saves, ID, callback){
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 224)         let updateSaves;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 225)         this.db.serialize(()=>{ 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 226)             this.db.get('SELECT saves FROM Players WHERE ID = ?',[ID],(err,row) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 227)                 if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 228)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 229)                     console.log(err.message);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 230)                     return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 231)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 232)                 if(row.saves !== null)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 233)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 234)                     updateSaves = row.saves + saves;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 235)                     this.db.run('UPDATE Players SET saves = ? WHERE ID = ?',[updateSaves,ID],(err) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 236)                         if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 237)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 238)                             console.log(err.message)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 239)                             return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 240)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 241)                         else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 242)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 243)                             callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 244)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 245)                     });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 246)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 247)             });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 248)         });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 249)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 250)     increment_hits(hits, ID, callback){
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 251)         let updateHits;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 252)         this.db.serialize(()=>{ 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 253)             this.db.get('SELECT hits FROM Players WHERE ID = ?',[ID],(err,row) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 254)                 if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 255)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 256)                     console.log(err.message);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 257)                     return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 258)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 259)                 if(row.hits !== null)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 260)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 261)                     updateHits = row.hits + hits;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 262)                     this.db.run('UPDATE Players SET hits = ? WHERE ID = ?',[updateHits,ID],(err) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 263)                         if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 264)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 265)                             console.log(err.message)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 266)                             return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 267)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 268)                         else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 269)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 270)                             callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 271)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 272)                     });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 273)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 274)             });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 275)         });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 276)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 277)     increment_RBIs(RBIs, ID, callback){
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 278)         let updateRBIs;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 279)         this.db.serialize(()=>{ 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 280)             this.db.get('SELECT RBIs FROM Players WHERE ID = ?',[ID],(err,row) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 281)                 if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 282)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 283)                     console.log(err.message);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 284)                     return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 285)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 286)                 if(row.RBIs !== null)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 287)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 288)                     updateRBIs = row.RBIs + RBIs;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 289)                     this.db.run('UPDATE Players SET RBIs = ? WHERE ID = ?',[updateRBIs,ID],(err) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 290)                         if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 291)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 292)                             console.log(err.message)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 293)                             return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 294)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 295)                         else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 296)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 297)                             callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 298)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 299)                     });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 300)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 301)             });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 302)         });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 303)     }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 304)     increment_errors(errors, ID, callback){
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 305)         let updateErrors;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 306)         this.db.serialize(()=>{ 
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 307)             this.db.get('SELECT errors FROM Players WHERE ID = ?',[ID],(err,row) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 308)                 if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 309)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 310)                     console.log(err.message);
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 311)                     return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 312)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 313)                 if(row.errors !== null)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 314)                 {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 315)                     updateErrors = row.errors + errors;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 316)                     this.db.run('UPDATE Players SET errors = ? WHERE ID = ?',[updateErrors,ID],(err) => {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 317)                         if(err)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 318)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 319)                             console.log(err.message)
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 320)                             return;
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 321)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 322)                         else
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 323)                         {
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 324)                             callback();
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 325)                         }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 326)                     });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 327)                 }
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 328)             });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 329)         });
65669b4c (jlongmi9 2023-05-06 16:04:44 -0400 330)     }

Back-End/Players/global_players.js
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400  3) const {get_player, get_players_on_team, show_all, create_player, delete_player, update_name, update_position, increment_stats} = require('../controllers/global_players.js');
310c5185 (jlongmi9 2023-05-05 19:13:42 -0400 16) router.get('/get_players_on_team/:teamId', get_players_on_team);
4d453c68 (jlongmi9 2023-05-06 13:10:56 -0400 24) router.patch('/increment_stats/:id', increment_stats);      

Back-End/Teams/global_teams_db.js
6f512d67 (jlongmi9     2023-05-04 17:15:58 -0400  31)         this.sql = 'INSERT INTO Teams (name, ID, P_ID, A_ID, sport, num_players, W, L, profile_picture) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)';
1685cc33 (jlongmi9     2023-05-04 17:28:03 -0400 124)             callback(row.name,row.ID,row.P_ID,row.A_ID,row.sport,row.num_players,row.W,row.L,row.profile_picture);
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 132)         let names = [];   
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 133)         let ids = [];
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 134)         let wins = [];
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 135)         let losses = [];
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 137)         this.db.all(this.sql, [ID], (err, rows) => {
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 138)             if(err){
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 139)                 return console.error(err.message);
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 140)             }
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 141)             if(rows.length == 0){callback("No Players");}
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 142)             else if(rows)
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 143)             {
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 144)                 rows.forEach((row) => {
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 145)                     names.push(row.name);
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 146)                     ids.push(row.ID);
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 147)                     wins.push(row.W);
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 148)                     losses.push(row.L);
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 149)                 })
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 150)                 callback(names,ids,wins,losses);
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 151)             }
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 152)             else{
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 153)                 console.log("error");
03b5170d (jlongmi9     2023-05-07 18:56:05 -0400 154)             }

Back-End/teams/global_teams.js 
b70b5203 (jlongmi9     2023-05-04 16:52:38 -0400 33) //router.getTeamsInLeague('/:leagueId,get_teams_in_league)

Back-End/Users/global_users_db.js 
ae78c6be (jlongmi9     2023-04-28 19:50:26 -0400  10)         //console.log("opening " + path);
ae78c6be (jlongmi9     2023-04-28 19:50:26 -0400  15)             //console.log("Connected to database.db");
f873314e (jlongmi9     2023-05-01 15:55:16 -0400  21)         this.db.run('CREATE TABLE Users(ID INT, user_name TEXT, email TEXT, password TEXT, first_name TEXT, last_name TEXT, playerID TEXT, teamID TEXT, leagueID TEXT, bio TEXT, pos TEXT, profile_picture BLOB)', (err)=>{
ae78c6be (jlongmi9     2023-04-28 19:50:26 -0400  23)             //console.log('Created User table')
ae78c6be (jlongmi9     2023-04-28 19:50:26 -0400  32)             //console.log('Dropped User table')
f873314e (jlongmi9     2023-05-01 15:55:16 -0400  37)     insert(id, un, email, password, fn, ln, pID, tID, lID, bio, pos, pp, callback){
448eec7d (jlongmi9     2023-05-01 16:29:14 -0400  39)           this.sql = 'INSERT INTO Users (ID, user_name, email, password, first_name, last_name, playerID, teamID, leagueID, bio, pos, profile_picture) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)'
f873314e (jlongmi9     2023-05-01 15:55:16 -0400  40)           this.db.run(this.sql, [id, un, email, password, fn, ln, pID, tID, lID, bio, pos, pp], (err)=>{
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 197)           callback(row.user_name,row.first_name,row.last_name,row.playerID,row.teamID,row.leagueID,row.email,row.bio,row.pos,row.profile_picture);
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 268)     //updates a user's player tag
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 269)     update_playerId(playerId, ID, callback){
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 270)       this.sql = "UPDATE Users SET playerID = ? WHERE ID = ?"
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 271)       this.db.run(this.sql, [playerId, ID], (err)=>{
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 272)           if(err){return console.log(err.message)}
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 273)       })
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 274)       callback();
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 275)     }
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 276) 
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 277)     //updates a user's team
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 278)     update_teamId(teamID, ID, callback){
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 279)       this.sql = "UPDATE Users SET teamID = ? WHERE ID = ?"
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 280)       this.db.run(this.sql, [teamID, ID], (err)=>{
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 281)           if(err){return console.log(err.message)}
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 282)       })
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 283)       callback();
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 284)     }
d36f108d (jlongmi9     2023-04-30 19:48:43 -0400 285) 
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 293)     }
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 294) 
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 295)     //update a users league ID column
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 296)     update_leagueId(leagueId, ID, callback) {
771d94ff (jlongmi9     2023-05-07 18:18:51 -0400 297)       console.log("IN league " + leagueId);
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 298)       this.sql = "UPDATE Users SET leagueID = ? WHERE ID = ?"
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 299)       this.db.run(this.sql, [leagueId, ID], (err)=>{
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 300)         if(err){return console.log(err.message)}
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 301)       })
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 302)       callback();
f873314e (jlongmi9     2023-05-01 15:55:16 -0400 303)     }
ae78c6be (jlongmi9     2023-04-28 19:50:26 -0400 320)             //console.log('Database Closed.')

Back-End/Users/global_users.js 
f873314e (jlongmi9 2023-05-01 15:55:16 -0400  3) const { get_user, login, show_all, create_user, delete_user, delete_session, update_firstname, update_lastname, update_username, update_password, update_email, update_bio, update_position, update_player, update_team, update_league, update_profile_picture } = require('../controllers/global_users.js');
5d031e7f (jlongmi9 2023-04-28 19:32:51 -0400 23) router.delete('/delete_session/:sessId', delete_session);
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 33) router.patch('/update_player/:id', update_player);
d36f108d (jlongmi9 2023-04-30 19:48:43 -0400 34) router.patch('/update_team/:id', update_team);
f873314e (jlongmi9 2023-05-01 15:55:16 -0400 35) router.patch('/update_league/:id', update_league);

Back-End/index.js 
a28a7f58 (jlongmi9 2023-05-01 22:51:53 -0400  5) const path = require('path');
a28a7f58 (jlongmi9 2023-05-01 22:51:53 -0400  6) 
a28a7f58 (jlongmi9 2023-05-01 22:51:53 -0400  7) const rootDir = path.dirname(require.main.filename);
a28a7f58 (jlongmi9 2023-05-01 22:51:53 -0400  8) console.log("root: " + rootDir);

Back-End/sessions_db.js 
ae78c6be (jlongmi9     2023-04-28 19:50:26 -0400 10)         //console.log("opening " + path);
ae78c6be (jlongmi9     2023-04-28 19:50:26 -0400 15)             //console.log("Connected to sessions.db");
ae78c6be (jlongmi9     2023-04-28 19:50:26 -0400 44)         //console.log("Again, Looking for session " + ID);
ae78c6be (jlongmi9     2023-04-28 19:50:26 -0400 67)             //console.log('Database Closed.')

Front-End/home/index.js 
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400   2) const url = 'http://127.0.0.1:5000/leagues'
3a2a43a2 (jlongmi9          2023-04-30 20:10:35 -0400   3) let userCookieId;
8aba686c (jlongmi9          2023-05-01 16:26:17 -0400   4) let userID;
77d4869c (jlongmi9          2023-05-06 10:31:50 -0400   5) let leagueData;
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  42) function createLeague(event){
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  43)   event.preventDefault();
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  44) 
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  45)   const leagueName = leagueInput.value; //Set leaguename
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  46)   const data = { 
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  47)     sport: selectedSport, 
77d4869c (jlongmi9          2023-05-06 10:31:50 -0400  48)     leagueName: leagueName,
77d4869c (jlongmi9          2023-05-06 10:31:50 -0400  49)     adminId: userID
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  50)   };
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  52)   console.log(data);
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  54)   //How data is sent back to database
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  55)   fetch(url, {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  56)     method: 'POST',
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  57)     headers: {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  58)         'Content-Type': 'application/json'
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  59)     },
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  60)     body: JSON.stringify(data)
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  61)   })
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  62)   .then(response => {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  63)     if (response.ok) {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  64)       // Redirect user to view their league page after successful POST request
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  65)       response.json().then(data => {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  66)         leagueData = {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  67)           leagueId: data.id
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  68)         };
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  69)         console.log("League Data after initializing: " + leagueData.leagueId)
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  70) 
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  71)         setUserLeague(leagueData, () => {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  72)           window.location.replace('league_admin.html');
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  73)         });
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  74)       });
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  75)     } 
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  76)     else {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  77)       // Handle error response
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  78)       throw new Error('Unable to create user account');
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  79)       window.location.replace('../error.html');
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  80)     }
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  81)   })
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  82)   .catch(error => console.error(error));
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  83)   return false;
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  84) }
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  85) 
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  86) let setUserLeague = function(data, callback) {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  87)   const sulURL = 'http://127.0.0.1:5000/users/update_league/' + userID;
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  88) 
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  89)   console.log(data);
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  90) 
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  91)   fetch(sulURL, {
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400  92)     method: 'PATCH',
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  93)     headers: {
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  94)         'Content-Type': 'application/json'
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  95)     },
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  96)     body: JSON.stringify(data)
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  97)  })
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  98)  .then(response => {
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400  99)     if (response.ok) {
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400 100)       // Redirect user to view their league page after successful POST request
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400 101)       console.log("Responded");
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400 102)       callback();
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400 103)     } else {
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400 104)       // Handle error response
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400 105)       throw new Error('Unable to create user account');
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400 106)       window.location.replace('../error.html');
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400 108)   })
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400 109)  .catch(error => console.error(error));
2328f8a1 (jlongmi9          2023-05-01 16:55:24 -0400 110) }
a28a7f58 (jlongmi9          2023-05-01 22:51:53 -0400 113) create_button.addEventListener('click', createLeague);
3a2a43a2 (jlongmi9          2023-04-30 20:10:35 -0400 119)     userCookieId = cookie ? cookie.split('=')[1] : null;
8aba686c (jlongmi9          2023-05-01 16:26:17 -0400 142)           userID = data.id;

Front-End/leagues/join_league.js 
d2eff426 (jlongmi9          2023-04-30 20:07:22 -0400   1) let userCookieId;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400   2) let userID;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400   6)   const cookies = document.cookie.split(';');
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400   7)   const cookie = cookies.find(c => c.trim().startsWith('UserCookie'));
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400   8)   userCookieId = cookie ? cookie.split('=')[1] : null;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400   9)   console.log(userCookieId);
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  10) 
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  11)   const sessionId = {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  12)     id: userCookieId
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  15)   const userURL = 'http://127.0.0.1:5000/users/' + sessionId.id;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  17)   callback(userURL);
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  18) }
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  19) 
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  20) let update_user_league = function(url,newLeague,callback)
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  21) {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  22)   fetch(url, {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  23)     method: 'PATCH',
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  24)     headers: {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  25)       'Content-Type': 'application/json'
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  26)     },
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  27)     body: JSON.stringify(newLeague)
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  28)   })
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  29)   .then(response => {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  30)     if(response.ok){
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  31)       callback();
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  32)     }
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  33)   })
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  34)   .catch((err) => {console.log(err);})
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  35) }
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  37) let setLeagueData = function(LeagueDataJSON, callback){
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  38)   const tableBody = document.querySelector('#league-table tbody');
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  39)   const leagueInModal = document.getElementById("league_in_modal");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  40)   const enrollPlayer = document.getElementById("confirm_enrollment");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  41)   // Get the modal
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  42)   var modal = document.getElementById("modal");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  43)   // Get the <span> element that closes the modal
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  44)   var span = document.getElementsByClassName("close")[0];
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  45)   //const leagueContainer = document.getElementById("league_contain_names");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  46)   //const lContainer = document.getElementById("l_container");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  47)   //const join = document.getElementById("join_button");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  48)   names = LeagueDataJSON.names;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  49)   sports = LeagueDataJSON.sports;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  50)   ids = LeagueDataJSON.ids;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  51)   for (let i = 0; i < names.length; i++) {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  52)     const leagueName = names[i];
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  53)     const leagueSport = sports[i];
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  54)     const leagueId = ids[i];
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  55)     const row = document.createElement('tr');
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  56)     const nameCol = document.createElement('td');
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  57)     const sportCol = document.createElement('td');
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  58)     const join = document.createElement('td');
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  59)     const join_bt = document.createElement('button');
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  60)     //const h4 = document.createElement("h4");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  61)     //h4.textContent = leagueName;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  62)     //leagueContainer.appendChild(h4);
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  63)     nameCol.textContent = leagueName;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  64)     //const head = document.createElement("h4");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  65)     if(leagueSport=== "Flag_football"){
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  66)           sportCol.textContent = "Flag Football";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  67)         //head.textContent = "Flag Football";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  68)     }else if(leagueSport === "Men_soccer"){
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  69)           sportCol.textContent = "Men's Soccer";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  70)         //head.textContent = "Men's Soccer";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  71)     }else{
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  72)         sportCol.textContent = leagueSport;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  73)         //head.textContent = leagueSport;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  74)     }
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  75)     //lContainer.appendChild(head);
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  76)     //const but = document.createElement("button");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  77)     //but.textContent = "Join this league";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  78)     join_bt.textContent = "Join this league";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  79)     join_bt.classList.add("dynprog-button");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  80)     join_bt.addEventListener("click", function(){
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  81)       modal.style.display = "block";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  82)       leagueInModal.textContent = leagueName;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  83)       enrollPlayer.addEventListener("click", function(){
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  84)           console.log("Confirm click");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  85)           const updateURL = 'http://127.0.0.1:5000/users/update_league/' + userID;
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  86)           const dataJSON = {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  87)             leagueId: leagueId
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  89)           update_user_league(updateURL,dataJSON,() => {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  90)             window.location.replace("league_home.html");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  91)           })
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  92)       });
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  93)       console.log("button clicked");
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  94)     });
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  95)     // When the user clicks on <span> (x), close the modal
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  96)     span.onclick = function() {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  97)       modal.style.display = "none";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  98)     }
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400  99)     // When the user clicks anywhere outside of the modal, close it
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 100)     window.onclick = function(event) {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 101)         if (event.target == modal) {
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 102)            modal.style.display = "none";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 104)       }
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 105)     //but.style.marginBottom = "10px";
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 106)     join.appendChild(join_bt);
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 107)     row.appendChild(nameCol);
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 108)     row.appendChild(sportCol);
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 109)     row.appendChild(join);
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 110)     tableBody.appendChild(row);
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 111)   }
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 112)   callback();
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 113) } 
771d94ff (jlongmi9          2023-05-07 18:18:51 -0400 147)             userID = data.id;
d2eff426 (jlongmi9          2023-04-30 20:07:22 -0400 164) 

Front-End/leagues/league_admin.js
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400  70)             const sportRadios = document.getElementsByName("sport");
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400  71)             for(const sport of sportRadios) {
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400  72)               if(sport.checked) {
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400  73)                 selectedSport = sport.value; //Setting value of selectedSport
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400  74)                 break;
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400  75)               }
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400  76)             }
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 167)       if (selectedSport !== ""){
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 171)         console.log("-> " + newSport.newSport);
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 172)         console.log("Here? " + leagueID);
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 218)           const leagueURL = 'http://127.0.0.1:5000/leagues/' + data.p_id;
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 219)           getLeagueData(leagueURL, () => {
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 220)             callback();
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 233)   let getLeagueData = function (leagueURL, callback) {
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 243)           callback();
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 253)   }

Front-End/leagues/league_home.js 
091071fa (jlongmi9          2023-05-04 17:39:01 -0400   4) let leagueAdmin;
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400   5) let userId;
091071fa (jlongmi9          2023-05-04 17:39:01 -0400   6) 
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400  36)           userId = data.id;
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  44)             else if(data.teamID === null && data.leagueID == null)
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  46)               let leagueNull;
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  47)               let teamNull; 
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  48)               setLeagueData(leagueNull, ()=> {
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  49)                 callback();
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  50)               });
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  51)               setTeamData(teamNull, ()=> {
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  52)                 callback();
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  53)               });
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  54)                 
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  57)             else
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  58)             {
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  59)               const leagueURL = 'http://127.0.0.1:5000/leagues/' + data.leagueID;
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  60)               getLeagueData(leagueURL, () => {
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  61)                 
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  62)                 callback();
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  63)               });
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  64)             }
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400 117)           leagueAdmin = data.adminId;
091071fa (jlongmi9          2023-05-04 17:39:01 -0400 130) 
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400 136)       if(leagueAdmin == userId)
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400 137)       {
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400 138)         console.log("Admin Logged In");
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400 143)       }
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400 144)       else
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400 145)       {
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400 147)         console.log("You are not an admin")
d7ed6493 (jlongmi9          2023-05-07 19:27:51 -0400 148)       }
b537d885 (jlongmi9          2023-05-04 17:58:07 -0400 184)     }
b537d885 (jlongmi9          2023-05-04 17:58:07 -0400 185)     else if(sport_type === "Men_soccer"){
b537d885 (jlongmi9          2023-05-04 17:58:07 -0400 186)       sportHeading.textContent = "Sport: Men's Soccer"
b537d885 (jlongmi9          2023-05-04 17:58:07 -0400 187)     }
b537d885 (jlongmi9          2023-05-04 17:58:07 -0400 188)     else{
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 191)   }
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 192)   if(leagueDataJSON.pp)
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 193)   {
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 194)     const league_photo = document.getElementById("league_photo");
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 195)     league_photo.src = "data:image/jpeg;base64," + leagueDataJSON.pp;
93ccd351 (jlongmi9          2023-05-08 23:47:04 -0400 196)   }

Front-End/teams/create_team.js 
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400  63) let globalUPOS;
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400  64) let globalUUN;
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400  65) let parentLeagueID;
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400  66) let leagueSport;
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 107)         globalUPOS = data.pos;
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 108)         globalUUN = data.username;
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 113)             if(data.teamID !== null) //this shouldn't happen, ideally they cannot create a team if they are already on one
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 119)             else if(data.teamID === null && data.leagueID == null) //gotta get league ID of league they are attempting to create a team in, probably from a cookie when they click on a league
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 120)             {  
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 123)             else //they are in a league already, get the leagueID from the user
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 124)             {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 125)               const leagueURL = 'http://127.0.0.1:5000/leagues/' + data.leagueID;
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 126)               getLeagueData(leagueURL, () => {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 127)                 callback();
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 128)               });
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 129)             }
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 147)     }
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 152)         const leagueURL = 'http://127.0.0.1:5000/leagues/' + data.p_id;
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 153)         getLeagueData(leagueURL, () => {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 154)           callback();
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400 177)         leagueSport = data.sport;
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400 178)         parentLeagueID = data.ID;
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400 179)         console.log(leagueSport + " " + parentLeagueID);
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 180)         callback();
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 239) const setUserTeamId = function(url,data,callback) {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 240)   fetch(url, {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 241)     method: 'PATCH',
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 242)     headers: {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 243)         'Content-Type': 'application/json'
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 244)     },
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 245)     body: JSON.stringify(data)
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 246)  })
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 247)  .then(response => {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 248)     if (response.ok) {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 249)       callback();
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 250)     } else {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 251)       // Handle error response
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 252)       throw new Error('Unable to create user account');
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 253)       window.location.replace('../error.html');
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 254)     }
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 255)   })
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 256)  .catch(error => console.error(error));
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 257) }
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 258) 
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 259) const createPlayer = function(url,data,callback) {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 260)   fetch(url, {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 261)     method: 'POST',
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 262)     headers: {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 263)         'Content-Type': 'application/json'
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 264)     },
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 265)     body: JSON.stringify(data)
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 266)  })
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 267)  .then(response => {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 268)     if (response.ok) {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 269)       console.log("Player Created")
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 270)       callback();
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 271)     } else {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 272)       // Handle error response
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 273)       throw new Error('Unable to create user account');
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 274)       window.location.replace('../error.html');
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 275)     }
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 276)   })
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 277)  .catch(error => console.error(error));
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 278) }
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 279) 
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400 283)   const teamName = teamInput.value; //Set leaguename
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400 285)       size: selectedSize, 
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400 287)       creator: globalUID,
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400 288)       P_ID: parentLeagueID,
e6055334 (jlongmi9          2023-05-04 20:39:51 -0400 289)       sport: leagueSport
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 304)           response.json().then(teamData => {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 305)             const updateURL = 'http://127.0.0.1:5000/users/update_team/' + globalUID;
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 306)             setUserTeamId(updateURL,teamData,() => {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 307)               console.log("Done");
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 308)               const globalUserData = {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 309)                 userId: globalUID,
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 310)                 teamId: teamData.teamId,
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 311)                 pos: globalUPOS,
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 312)                 username: globalUUN
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 313)               }
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 314)               const playerURL = 'http://127.0.0.1:5000/players';
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 315)               createPlayer(playerURL,globalUserData,() => {
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 316)                 console.log("DONE");
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 318)               });
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 319)             })
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 320)           });
0d4fa490 (jlongmi9          2023-05-02 12:34:44 -0400 332)   createTeam();

Front-End/teams/edit_fb_stats.js
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400   1) //GLOBALS
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400   2) let teamID;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400   3) let leagueID;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400   4) let editPlayerID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   5) let userCookieId;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400   6) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400   7) //Set HTML objects
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400   8) const welcomeButton = document.querySelector("#welcome-button");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   9) const update_player_BT = document.getElementById('update_stats_button');
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  10) let playerName = document.getElementById("player_name");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  11) let TDs = document.getElementById("touchdowns");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  12) let catches = document.getElementById("catches");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  13) let tackles = document.getElementById("tackles");
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  14) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  15) //get sessionId from cookie
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  16) let getSessionId = function(callback) {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  17)     const cookies = document.cookie.split(';');
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  18)     const cookie = cookies.find(c => c.trim().startsWith('UserCookie'));
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  19)     userCookieId = cookie ? cookie.split('=')[1] : null;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  20)   
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  21)     const sessionId = {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  22)       id: userCookieId
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  23)     }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  24)   
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  25)     const userURL = 'http://127.0.0.1:5000/users/' + sessionId.id;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  26)   
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  27)     callback(userURL);
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  28) }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  29) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  30) let getPlayerCookie = function(callback) {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  31)     const cookies = document.cookie.split(';');
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  32)     const cookie = cookies.find(c => c.trim().startsWith('PlayerCookie'));
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  33)     editPlayerID = cookie ? cookie.split('=')[1] : null;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  34) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  35)     callback();
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  36) }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  37) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  38) //get userData
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  39) let getUserData = function (url,callback) {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  40)     fetch(url, {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  41)       method: 'GET',
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  42)       headers: {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  43)         'Content-Type': 'application/json'
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  44)       }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  45)     })
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  46)     .then(response => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  47)         if(response.ok) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  48)         {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  49)             response.json().then(data => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  50)                 teamID = data.teamID;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  51)                 setUserData(data,() => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  52)                     callback();
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  53)                 })
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  54)             })
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  55)         }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  56)         else
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  57)         {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  58) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  59)         }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  60)     })
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  61)     .catch(error => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  62)       console.error(error);
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  63)     });
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  64) }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  65) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  66) //get teamData
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  67) let getTeamData = function (teamURL, callback) {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  68)     fetch(teamURL, {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  69)         method: 'GET',
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  70)          headers: {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  71)         'Content-Type': 'application/json'
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  72)         }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  73)     })
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  74)     .then(response => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  75)         if(response.ok) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  76)         {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  77)             response.json().then(data => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  78)                 leagueID = data.p_id;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  79)                 callback();
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  80)             });
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  81)         } 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  82)         else 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  83)         {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  84)             console.error('Error: ' + response.statusText);
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  85)         }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  86)     })
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  87)     .catch(error => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  88)         console.error(error);
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  89)     });
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  90) }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  91) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  92) //get leagueData
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  93) let getLeagueData = function (leagueURL, callback) {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  94)     fetch(leagueURL, {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  95)         method: 'GET',
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  96)         headers: {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  97)             'Content-Type': 'application/json'
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  98)         }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400  99)     })
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 100)     .then(response => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 101)         if(response.ok) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 102)         {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 103)             response.json().then(data => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 104)                 callback();
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 105)             });
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 106)         } 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 107)         else 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 108)         {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 109)             console.error('Error: ' + response.statusText);
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 110)         }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 111)     })
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 112)     .catch(error => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 113)         console.error(error);
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 114)     });
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 115) }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 116) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 117) let getPlayerData = function(url,callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 118)     fetch(url, {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 119)         method: 'GET',
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 120)         headers: {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 121)             'Content-Type': 'application/json'
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 122)         }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 123)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 124)     .then(response => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 125)         if(response.ok) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 126)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 127)             response.json().then(data => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 128)                 setPlayerData(data,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 129)                     callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 130)                 })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 131)             });
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 132)         } 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 133)         else 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 134)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 135)             console.error('Error: ' + response.statusText);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 136)         }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 137)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 138)     .catch(error => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 139)         console.error(error);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 140)     });
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 141) }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 142) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 143) let setUserData = function(userDataJSON,callback) {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 144)     welcomeButton.textContent = "Welcome, " + userDataJSON.username + "!";
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 145)     callback();
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 146) }
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 147) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 148) let setPlayerData = function(playerDataJSON,callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 149)     playerName.textContent = playerDataJSON.username + "'s";
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 150)     callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 151) }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 152) 
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 153) let loadData = function() {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 154)     getPlayerCookie(() => {console.log(editPlayerID);})
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 155)     getSessionId((userURL) => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 156)         getUserData(userURL,() => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 157)             const teamURL = 'http://127.0.0.1:5000/teams/' + teamID;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 158)             getTeamData(teamURL,() => {
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 159)                 const leagueURL = 'http://127.0.0.1:5000/leagues/' + leagueID;
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 160)                 getLeagueData(leagueURL,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 161)                     const playerURL = 'http://127.0.0.1:5000/players/' + editPlayerID;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 162)                     getPlayerData(playerURL,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 163)                         console.log("Loaded")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 164)                     })
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 165)                 });
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 166)             });
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 167)         });
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 168)     });
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 169) };
c7751ebc (jlongmi9 2023-05-08 18:47:11 -0400 170) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 171) loadData();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 172) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 173) let buttonSubmit = function(callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 174)     let newTDs;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 175)     let newCatches;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 176)     let newTackles;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 177) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 178)     if(TDs.value != "")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 179)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 180)         newTDs = parseInt(TDs.value);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 181)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 182)     else
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 183)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 184)         newTDs = undefined;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 185)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 186)     if(catches.value != "")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 187)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 188)         newCatches = parseInt(catches.value);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 189)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 190)     else
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 191)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 192)         newCatches = undefined;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 193)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 194)     if(tackles.value != "")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 195)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 196)        newTackles = parseInt(tackles.value);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 197)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 198)     else
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 199)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 200)         newTackles = undefined;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 201)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 202) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 203)     let dataToBeUpdated = {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 204)         TDs: newTDs,
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 205)         catches: newCatches,
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 206)         tackles: newTackles
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 207)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 208) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 209)     const updateURL = 'http://127.0.0.1:5000/players/increment_stats/' + editPlayerID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 210) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 211) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 212)     updateRequest(updateURL,dataToBeUpdated,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 213)         callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 214)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 215) }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 216) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 217) let updateRequest = function(url,updateData,callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 218)     fetch(url, {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 219)         method: 'PATCH',
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 220)         headers: {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 221)             'Content-Type': 'application/json'
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 222)         },
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 223)         body: JSON.stringify(updateData)
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 224)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 225)     .then(response => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 226)         if(response.ok) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 227)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 228)             callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 229)         } 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 230)         else 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 231)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 232)             console.error('Error: ' + response.statusText);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 233)         }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 234)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 235)     .catch(error => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 236)         console.error(error);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 237)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 238) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 239) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 240) update_player_BT.addEventListener('click', (event) =>{
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 241)     event.preventDefault();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 242)     buttonSubmit(() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 243)         window.location.replace("team_home.html");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 244)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 245)     return false;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 246) });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 247) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 248) let logout = function(callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 249)     const cookies = document.cookie.split(";");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 250)     const deleteSessionURL = 'http://127.0.0.1:5000/users/delete_session/' + userCookieId;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 251)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 252)     cookies.forEach(cookie => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 253)       console.log(cookie)
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 254)       if(cookie.trim().startsWith("UserCookie")) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 255)         // Set the cookie's expiration date to a past date to delete it
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 256)         document.cookie = cookie.split("=")[0] + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 257)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 258)       if(cookie.trim().startsWith("PlayerCookie")) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 259)         // Set the cookie's expiration date to a past date to delete it
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 260)         document.cookie = cookie.split("=")[0] + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 261)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 262)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 263)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 264)     fetch(deleteSessionURL, {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 265)       method: 'DELETE'
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 266)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 267)     .then(response => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 268)       if (response.ok) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 269)         console.log("Session Deleted");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 270)         callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 271)       } 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 272)       else {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 273)         console.error('Error: ' + response.statusText);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 274)         callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 275)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 276)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 277)     .catch(error => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 278)       console.error(error);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 279)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 280) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 281) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 282) document.querySelector("#Log-Out").onclick = function(){
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 283)     logout(() => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 284)       window.location.replace("../home/index.html");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 285)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 286) }

Front-End/teams/edit_sb_stats.js
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   1) //GLOBALS
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   2) let teamID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   3) let leagueID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   4) let editPlayerID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   5) let userCookieId;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   6) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   7) //Set HTML objects
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   8) const welcomeButton = document.querySelector("#welcome-button");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400   9) const update_player_BT = document.getElementById("update_stats_button");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  10) let playerName = document.getElementById("player_name");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  11) let hits = document.getElementById("hits");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  12) let RBIs = document.getElementById("rbis");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  13) let errors = document.getElementById("errors");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  14) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  15) //get sessionId from cookie
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  16) let getSessionId = function(callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  17)     const cookies = document.cookie.split(';');
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  18)     const cookie = cookies.find(c => c.trim().startsWith('UserCookie'));
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  19)     userCookieId = cookie ? cookie.split('=')[1] : null;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  20)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  21)     const sessionId = {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  22)       id: userCookieId
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  23)     }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  24)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  25)     const userURL = 'http://127.0.0.1:5000/users/' + sessionId.id;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  26)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  27)     callback(userURL);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  28) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  29) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  30) let getPlayerCookie = function(callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  31)     const cookies = document.cookie.split(';');
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  32)     const cookie = cookies.find(c => c.trim().startsWith('PlayerCookie'));
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  33)     editPlayerID = cookie ? cookie.split('=')[1] : null;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  34) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  35)     callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  36) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  37) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  38) //get userData
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  39) let getUserData = function (url,callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  40)     fetch(url, {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  41)       method: 'GET',
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  42)       headers: {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  43)         'Content-Type': 'application/json'
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  44)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  45)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  46)     .then(response => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  47)         if(response.ok) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  48)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  49)             response.json().then(data => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  50)                 teamID = data.teamID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  51)                 setUserData(data,() => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  52)                     callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  53)                 })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  54)             })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  55)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  56)         else
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  57)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  58) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  59)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  60)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  61)     .catch(error => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  62)       console.error(error);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  63)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  64) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  65) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  66) //get teamData
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  67) let getTeamData = function (teamURL, callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  68)     fetch(teamURL, {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  69)         method: 'GET',
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  70)          headers: {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  71)         'Content-Type': 'application/json'
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  72)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  73)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  74)     .then(response => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  75)         if(response.ok) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  76)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  77)             response.json().then(data => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  78)                 leagueID = data.p_id;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  79)                 callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  80)             });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  81)         } 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  82)         else 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  83)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  84)             console.error('Error: ' + response.statusText);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  85)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  86)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  87)     .catch(error => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  88)         console.error(error);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  89)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  90) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  91) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  92) //get leagueData
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  93) let getLeagueData = function (leagueURL, callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  94)     fetch(leagueURL, {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  95)         method: 'GET',
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  96)         headers: {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  97)             'Content-Type': 'application/json'
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  98)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  99)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 100)     .then(response => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 101)         if(response.ok) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 102)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 103)             response.json().then(data => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 104)                 callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 105)             });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 106)         } 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 107)         else 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 108)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 109)             console.error('Error: ' + response.statusText);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 110)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 111)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 112)     .catch(error => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 113)         console.error(error);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 114)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 115) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 116) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 117) let getPlayerData = function(url,callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 118)     fetch(url, {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 119)         method: 'GET',
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 120)         headers: {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 121)             'Content-Type': 'application/json'
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 122)         }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 123)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 124)     .then(response => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 125)         if(response.ok) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 126)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 127)             response.json().then(data => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 128)                 setPlayerData(data,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 129)                     callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 130)                 })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 131)             });
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 132)         } 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 133)         else 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 134)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 135)             console.error('Error: ' + response.statusText);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 136)         }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 137)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 138)     .catch(error => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 139)         console.error(error);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 140)     });
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 141) }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 142) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 143) let setUserData = function(userDataJSON,callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 144)     welcomeButton.textContent = "Welcome, " + userDataJSON.username + "!";
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 145)     callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 146) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 147) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 148) let setPlayerData = function(playerDataJSON,callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 149)     playerName.textContent = playerDataJSON.username + "'s";
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 150)     callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 151) }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 152) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 153) let loadData = function() {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 154)     getPlayerCookie(() => {console.log(editPlayerID);})
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 155)     getSessionId((userURL) => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 156)         getUserData(userURL,() => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 157)             const teamURL = 'http://127.0.0.1:5000/teams/' + teamID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 158)             getTeamData(teamURL,() => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 159)                 const leagueURL = 'http://127.0.0.1:5000/leagues/' + leagueID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 160)                 getLeagueData(leagueURL,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 161)                     const playerURL = 'http://127.0.0.1:5000/players/' + editPlayerID;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 162)                     getPlayerData(playerURL,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 163)                         console.log("Loaded")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 164)                     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 165)                 });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 166)             });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 167)         });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 168)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 169) };
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 170) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 171) loadData();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 172) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 173) let buttonSubmit = function(callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 174)     let newHits;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 175)     let newRBIs;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 176)     let newErrors;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 177) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 178)     if(hits.value != "")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 179)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 180)         newHits = parseInt(hits.value);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 181)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 182)     else
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 183)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 184)         newHits = undefined;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 185)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 186)     if(RBIs.value != "")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 187)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 188)         newRBIs = parseInt(RBIs.value);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 189)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 190)     else
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 191)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 192)         newRBIs = undefined;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 193)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 194)     if(errors.value != "")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 195)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 196)        newErrors = parseInt(errors.value);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 197)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 198)     else
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 199)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 200)         newErrors = undefined;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 201)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 202) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 203)     let dataToBeUpdated = {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 204)         hits: newHits,
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 205)         RBIs: newRBIs,
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 206)         errors: newErrors
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 207)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 208) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 209)     const updateURL = 'http://127.0.0.1:5000/players/increment_stats/' + editPlayerID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 210) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 211) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 212)     updateRequest(updateURL,dataToBeUpdated,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 213)         callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 214)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 215) }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 216) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 217) let updateRequest = function(url,updateData,callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 218)     fetch(url, {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 219)         method: 'PATCH',
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 220)         headers: {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 221)             'Content-Type': 'application/json'
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 222)         },
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 223)         body: JSON.stringify(updateData)
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 224)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 225)     .then(response => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 226)         if(response.ok) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 227)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 228)             callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 229)         } 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 230)         else 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 231)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 232)             console.error('Error: ' + response.statusText);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 233)         }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 234)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 235)     .catch(error => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 236)         console.error(error);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 237)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 238) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 239) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 240) update_player_BT.addEventListener('click', (event) =>{
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 241)     event.preventDefault();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 242)     buttonSubmit(() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 243)         window.location.replace("team_home.html");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 244)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 245)     return false;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 246) });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 247) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 248) let logout = function(callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 249)     const cookies = document.cookie.split(";");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 250)     const deleteSessionURL = 'http://127.0.0.1:5000/users/delete_session/' + userCookieId;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 251)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 252)     cookies.forEach(cookie => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 253)       console.log(cookie)
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 254)       if(cookie.trim().startsWith("UserCookie")) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 255)         // Set the cookie's expiration date to a past date to delete it
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 256)         document.cookie = cookie.split("=")[0] + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 257)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 258)       if(cookie.trim().startsWith("PlayerCookie")) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 259)         // Set the cookie's expiration date to a past date to delete it
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 260)         document.cookie = cookie.split("=")[0] + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 261)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 262)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 263)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 264)     fetch(deleteSessionURL, {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 265)       method: 'DELETE'
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 266)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 267)     .then(response => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 268)       if (response.ok) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 269)         console.log("Session Deleted");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 270)         callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 271)       } 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 272)       else {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 273)         console.error('Error: ' + response.statusText);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 274)         callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 275)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 276)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 277)     .catch(error => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 278)       console.error(error);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 279)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 280) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 281) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 282) document.querySelector("#Log-Out").onclick = function(){
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 283)     logout(() => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 284)       window.location.replace("../home/index.html");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 285)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 286) }

Front-End/teams/edit_sc_stats.js
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   1) //GLOBALS
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   2) let teamID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   3) let leagueID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   4) let editPlayerID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   5) let userCookieId;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   6) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   7) //Set HTML objects
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   8) const welcomeButton = document.querySelector("#welcome-button");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400   9) const update_player_BT = document.getElementById('update_stats_button');
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  10) let playerName = document.getElementById("player_name");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  11) let goals = document.getElementById("goals");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400  12) let saves = document.getElementById("saves");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  13) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  14) //get sessionId from cookie
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  15) let getSessionId = function(callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  16)     const cookies = document.cookie.split(';');
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  17)     const cookie = cookies.find(c => c.trim().startsWith('UserCookie'));
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  18)     userCookieId = cookie ? cookie.split('=')[1] : null;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  19)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  20)     const sessionId = {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  21)       id: userCookieId
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  22)     }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  23)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  24)     const userURL = 'http://127.0.0.1:5000/users/' + sessionId.id;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  25)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  26)     callback(userURL);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  27) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  28) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  29) let getPlayerCookie = function(callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  30)     const cookies = document.cookie.split(';');
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  31)     const cookie = cookies.find(c => c.trim().startsWith('PlayerCookie'));
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  32)     editPlayerID = cookie ? cookie.split('=')[1] : null;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  33) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  34)     callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  35) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  36) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  37) //get userData
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  38) let getUserData = function (url,callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  39)     fetch(url, {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  40)       method: 'GET',
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  41)       headers: {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  42)         'Content-Type': 'application/json'
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  43)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  44)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  45)     .then(response => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  46)         if(response.ok) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  47)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  48)             response.json().then(data => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  49)                 teamID = data.teamID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  50)                 setUserData(data,() => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  51)                     callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  52)                 })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  53)             })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  54)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  55)         else
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  56)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  57) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  58)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  59)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  60)     .catch(error => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  61)       console.error(error);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  62)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  63) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  64) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  65) //get teamData
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  66) let getTeamData = function (teamURL, callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  67)     fetch(teamURL, {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  68)         method: 'GET',
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  69)          headers: {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  70)         'Content-Type': 'application/json'
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  71)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  72)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  73)     .then(response => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  74)         if(response.ok) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  75)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  76)             response.json().then(data => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  77)                 leagueID = data.p_id;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  78)                 callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  79)             });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  80)         } 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  81)         else 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  82)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  83)             console.error('Error: ' + response.statusText);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  84)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  85)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  86)     .catch(error => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  87)         console.error(error);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  88)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  89) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  90) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  91) //get leagueData
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  92) let getLeagueData = function (leagueURL, callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  93)     fetch(leagueURL, {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  94)         method: 'GET',
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  95)         headers: {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  96)             'Content-Type': 'application/json'
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  97)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  98)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400  99)     .then(response => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 100)         if(response.ok) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 101)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 102)             response.json().then(data => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 103)                 callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 104)             });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 105)         } 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 106)         else 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 107)         {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 108)             console.error('Error: ' + response.statusText);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 109)         }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 110)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 111)     .catch(error => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 112)         console.error(error);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 113)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 114) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 115) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 116) let getPlayerData = function(url,callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 117)     fetch(url, {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 118)         method: 'GET',
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 119)         headers: {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 120)             'Content-Type': 'application/json'
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 121)         }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 122)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 123)     .then(response => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 124)         if(response.ok) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 125)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 126)             response.json().then(data => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 127)                 setPlayerData(data,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 128)                     callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 129)                 })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 130)             });
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 131)         } 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 132)         else 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 133)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 134)             console.error('Error: ' + response.statusText);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 135)         }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 136)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 137)     .catch(error => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 138)         console.error(error);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 139)     });
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 140) }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 141) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 142) let setUserData = function(userDataJSON,callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 143)     welcomeButton.textContent = "Welcome, " + userDataJSON.username + "!";
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 144)     callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 145) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 146) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 147) let setPlayerData = function(playerDataJSON,callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 148)     playerName.textContent = playerDataJSON.username + "'s";
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 149)     callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 150) }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 151) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 152) let loadData = function() {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 153)     getPlayerCookie(() => {console.log(editPlayerID);})
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 154)     getSessionId((userURL) => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 155)         getUserData(userURL,() => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 156)             const teamURL = 'http://127.0.0.1:5000/teams/' + teamID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 157)             getTeamData(teamURL,() => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 158)                 const leagueURL = 'http://127.0.0.1:5000/leagues/' + leagueID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 159)                 getLeagueData(leagueURL,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 160)                     const playerURL = 'http://127.0.0.1:5000/players/' + editPlayerID;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 161)                     getPlayerData(playerURL,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 162)                         console.log("Loaded")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 163)                     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 164)                 });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 165)             });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 166)         });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 167)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 168) };
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 169) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 170) loadData();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 171) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 172) let buttonSubmit = function(callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 173)     let newGoals;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 174)     let newSaves;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 175) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 176)     if(goals.value != "")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 177)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 178)         newGoals = parseInt(goals.value);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 179)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 180)     else
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 181)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 182)         newGoals = undefined;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 183)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 184)     if(saves.value != "")
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 185)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 186)         newSaves = parseInt(saves.value);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 187)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 188)     else
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 189)     {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 190)         newSaves = undefined;
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 191)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 192) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 193)     let dataToBeUpdated = {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 194)         goals: newGoals,
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 195)         saves: newSaves
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 196)     }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 197) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 198)     const updateURL = 'http://127.0.0.1:5000/players/increment_stats/' + editPlayerID;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 199) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 200) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 201)     updateRequest(updateURL,dataToBeUpdated,() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 202)         callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 203)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 204) }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 205) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 206) let updateRequest = function(url,updateData,callback) {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 207)     fetch(url, {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 208)         method: 'PATCH',
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 209)         headers: {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 210)             'Content-Type': 'application/json'
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 211)         },
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 212)         body: JSON.stringify(updateData)
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 213)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 214)     .then(response => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 215)         if(response.ok) 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 216)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 217)             callback();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 218)         } 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 219)         else 
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 220)         {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 221)             console.error('Error: ' + response.statusText);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 222)         }
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 223)     })
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 224)     .catch(error => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 225)         console.error(error);
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 226)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 227) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 228) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 229) update_player_BT.addEventListener('click', (event) =>{
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 230)     event.preventDefault();
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 231)     buttonSubmit(() => {
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 232)         window.location.replace("team_home.html");
bea42d4c (jlongmi9 2023-05-08 20:56:27 -0400 233)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 234)     return false;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 235) });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 236) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 237) let logout = function(callback) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 238)     const cookies = document.cookie.split(";");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 239)     const deleteSessionURL = 'http://127.0.0.1:5000/users/delete_session/' + userCookieId;
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 240)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 241)     cookies.forEach(cookie => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 242)       console.log(cookie)
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 243)       if(cookie.trim().startsWith("UserCookie")) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 244)         // Set the cookie's expiration date to a past date to delete it
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 245)         document.cookie = cookie.split("=")[0] + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 246)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 247)       if(cookie.trim().startsWith("PlayerCookie")) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 248)         // Set the cookie's expiration date to a past date to delete it
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 249)         document.cookie = cookie.split("=")[0] + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 250)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 251)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 252)   
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 253)     fetch(deleteSessionURL, {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 254)       method: 'DELETE'
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 255)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 256)     .then(response => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 257)       if (response.ok) {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 258)         console.log("Session Deleted");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 259)         callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 260)       } 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 261)       else {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 262)         console.error('Error: ' + response.statusText);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 263)         callback();
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 264)       }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 265)     })
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 266)     .catch(error => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 267)       console.error(error);
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 268)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 269) }
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 270) 
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 271) document.querySelector("#Log-Out").onclick = function(){
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 272)     logout(() => {
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 273)       window.location.replace("../home/index.html");
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 274)     });
4feb43ad (jlongmi9 2023-05-08 19:29:34 -0400 275) }

Front-End/teams/team_admin.js 
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400   4) let teamID;
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400   5) 
edbd0b1a (jlongmi9   2023-05-08 17:50:58 -0400   9) const team_photo = document.querySelector('#profile_photo');
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  19) function buildData() {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  20) 
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  22)   if(team_name.value.trim === '') {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  23)     team_name.value = null;
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  24)   }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  26)   //Picture
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  27)   if(profile_photo.value.trim() === '') {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  28)     profile_photo.value = null;
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  30)   else {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  31)     const pic = profile_photo.files[0];
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  32)     const reader = new FileReader();
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  33)     reader.readAsDataURL(pic);
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  34)     reader.onload = function () {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  35)       encodedPhoto = reader.result;
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  36)     };
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  41) let getSessionId = function(callback) {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  42)   const cookies = document.cookie.split(';');
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  43)   const cookie = cookies.find(c => c.trim().startsWith('UserCookie'));
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  44)   const userCookieId = cookie ? cookie.split('=')[1] : null;
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  45)   console.log(userCookieId);
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  46) 
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  47)   const sessionId = {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  48)     id: userCookieId
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  51)   const userURL = 'http://127.0.0.1:5000/users/' + sessionId.id;
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  53)   callback(userURL);
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  54) }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  55) 
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  56) let getUserData = function (url, callback) {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  57)   console.log(url);
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  58)   fetch(url, {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  59)     method: 'GET',
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  60)     headers: {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  61)       'Content-Type': 'application/json'
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  62)     }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  63)   })
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  70)             if (data.teamID !== null) {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  71)               getTeamData(teamURL, () => {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  73)               });
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  74)             }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  75)             else {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  76)               callback();
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  77)             }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  80)       }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  88) }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  89) 
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  90) let getTeamData = function (teamURL, callback) {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  91)   fetch(teamURL, {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  92)     method: 'GET',
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  93)     headers: {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  94)       'Content-Type': 'application/json'
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400  96)   })
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 100)             teamID = data.id;
edbd0b1a (jlongmi9   2023-05-08 17:50:58 -0400 101)             const leagueURL = 'http://127.0.0.1:5000/leagues/' + data.p_id;
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 106)       }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 114) }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 115) 
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 116) let getLeagueData = function (leagueURL, callback) {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 117)   fetch(leagueURL, {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 118)     method: 'GET',
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 119)     headers: {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 120)       'Content-Type': 'application/json'
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 122)   })
edbd0b1a (jlongmi9   2023-05-08 17:50:58 -0400 126)           console.log("League Data Set");
edbd0b1a (jlongmi9   2023-05-08 17:50:58 -0400 127)           callback();
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 129)       }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 130)       else 
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 131)       {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 138) }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 140) //Reference for username
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 145) let setUserData = function (userDataJSON, callback) {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 146)   console.log(userDataJSON.username);
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 147)   //FOR JULIANA : PUT CODE HERE TO FILL IN HTML WITH USER DATA (USE THE 'userDataJSON' OBJECT)
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 148)   if (userDataJSON.username) {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 149)     username = userDataJSON.username;
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 150)     welcomeButton.textContent = "Welcome, " + username + "!";
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 151)   };
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 152)   callback();
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 155) let logout = function (callback) {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 173)     .then(response => {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 174)       if (response.ok) {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 175)         console.log("Session Deleted");
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 176)         callback();
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 177)       }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 178)       else {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 179)         console.error('Error: ' + response.statusText);
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 180)         callback();
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 181)       }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 182)     })
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 183)     .catch(error => {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 184)       console.error(error);
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 185)     });
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 190) let makeRequest = function (dataToBeUpdated, url, callback) {
edbd0b1a (jlongmi9   2023-05-08 17:50:58 -0400 191)   //errorElement.style.display = "none"; //Hide the error message
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 192)   fetch(url, {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 193)       method: 'PATCH',
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 194)       headers: {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 195)           'Content-Type': 'application/json'
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 196)       },
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 197)       body: JSON.stringify(dataToBeUpdated)
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 198)    })
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 199)    .then(response => {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 200)       if(response.ok){
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 201)         (console.log("Responded"));
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 202)         callback();
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 203)       }else{
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 204)         if(response.status === 413){
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 205)           console.log("Picture Too Big");  //MAKE THIS GO TO SCREEN
edbd0b1a (jlongmi9   2023-05-08 17:50:58 -0400 206)           //errorElement.innerText = "*The picture you uploaded is too big*";
edbd0b1a (jlongmi9   2023-05-08 17:50:58 -0400 207)           //errorElement.style.display = "block";
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 208)       }
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 209)       }
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 210)    })
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 211)    .catch(error => console.error(error));
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 212) }
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 213) 
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 214) const waitOnRequest = function (numOfInputs, userID,) {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 215)   return new Promise((resolve,reject) => {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 216)       let proccessed = 0;
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 217)       if(numOfInputs === proccessed) resolve(); //if zero fields were updated
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 218)       if(team_name.value !== "") //if the field is filled in
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 219)       {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 220)           const tn = {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 221)               newName: team_name.value   //get the value entered
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 222)           }
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 223)           const updateTNUrl = 'http://127.0.0.1:5000/teams/update_team_name/' + teamID;  //construct patch URL
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 224)           makeRequest(tn,updateTNUrl, () => {  //make the patch request, see makeRequest function
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 225)               proccessed += 1;                  //increment the number of proccessed requests
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 226)               if(proccessed === numOfInputs) resolve();   //if the number proccessed equals number inputted, all requests processed, return
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 227)           });
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 228)       }
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 229)       if(team_photo.value !== "")
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 230)       {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 231)           const photo = {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 232)               pp: last_name.value
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 233)           }
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 234)           const updatePPUrl = 'http://127.0.0.1:5000/teams/update_picture/' + teamID;
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 235)           makeRequest(photo,updatePPUrl, () => {
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 236)               proccessed += 1;
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 237)               if(proccessed === numOfInputs) resolve();
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 238)           });
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 239)       }
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 240)   });
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 241) };
f5911678 (jlongmi9   2023-05-08 17:29:18 -0400 242) 
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 243) let getNumOfInputs = function () {
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 244)   let numOfInputs = 0;
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 245) 
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 246)   if(team_name.value !== "")    numOfInputs += 1;
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 247)   if(team_photo.value !== "")   numOfInputs += 1;
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 248) 
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 249)   return numOfInputs;
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 250) }
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 251) 
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 252) let buttonSubmit = function () {
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 253)   let numOfInputs = getNumOfInputs(); //get number of fields that the user entered
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 254)   getSessionId((url) => { //get user from session store to get user ID
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 255)       getUserData(url, (id) => { //get user ID
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 256)           waitOnRequest(numOfInputs,id).then(() => {  //make patch requests until the number of fields match proccessed, returning when all requests have been made
edbd0b1a (jlongmi9   2023-05-08 17:50:58 -0400 257)               window.location.replace("team_home.html"); //take back to team home page
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 258)           })
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 259)           .catch(error => {
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 260)               console.log(error);
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 261)           })
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 262)       });
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 263)   });
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 264) };
40e48c82 (jlongmi9   2023-05-08 17:21:05 -0400 265) 
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 268) document.querySelector("#Log-Out").onclick = function () {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 272) }
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 273) 
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 274) update_team_BT.addEventListener('click',(event) => {
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 275)   event.preventDefault();
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 276)   buttonSubmit();
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 277)   return false;
02cc4137 (jlongmi9   2023-05-08 17:13:36 -0400 278) })

Front-End/teams/team_home.js 
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400   1) let teamId;
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400   9)   const cookies = document.cookie.split(';');
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  10)   const cookie = cookies.find(c => c.trim().startsWith('UserCookie'));
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  11)   const userCookieId = cookie ? cookie.split('=')[1] : null;
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  12)   console.log(userCookieId);
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  13) 
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  14)   const sessionId = {
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  15)     id: userCookieId
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  18)   const userURL = 'http://127.0.0.1:5000/users/' + sessionId.id;
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400  19) 
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  20)   callback(userURL);
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  21) }
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  22) 
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  25) const welcomeButton = document.querySelector("#welcome-button");
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  30)   console.log(userDataJSON.username);
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  31)   if(userDataJSON.username){
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  32)     username = userDataJSON.username;
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  33)     welcomeButton.textContent = "Welcome, " + username + "!";
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  34)   };
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  35)   callback();
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  36) }
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  40)   const cookies = document.cookie.split(";");
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  41) 
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  42)   cookies.forEach(cookie => {
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  43)     console.log(cookie)
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  44)     if (cookie.trim().startsWith("UserCookie")) {
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  45)       console.log("Test");
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  46)       // Set the cookie's expiration date to a past date to delete it
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  47)       document.cookie = cookie.split("=")[0] + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  48)       console.log(document.cookie)
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  49)     }
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  50)   });
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  51) 
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  52)   const deleteSessionURL = 'http://127.0.0.1:5000/users/delete_session/' + userCookieId;
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  53) 
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  54)   fetch(deleteSessionURL, {
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  55)     method: 'DELETE'
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  56)   })
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  57)   .then(response => {
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  58)     if (response.ok) {
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  59)       console.log("Session Deleted");
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  60)       callback();
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  61)     } 
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  62)     else {
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  63)       console.error('Error: ' + response.statusText);
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  64)       callback();
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  65)     }
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  66)   })
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  67)   .catch(error => {
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  68)     console.error(error);
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  69)   });
952dba4a (jlongmi9          2023-05-05 19:16:08 -0400  70) }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400  71) 
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  72) let getPlayers = function(url,callback) {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  73)   fetch(url, {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  74)     method: 'GET',
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  75)     headers: {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  76)       'Content-Type': 'application/json'
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  77)     }
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  78)   })
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  79)   .then(response => {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  80)     if(response.status === 200) { //we got players
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  81)       response.json().then(data => {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  83)       })
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  84)     }
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  85)     else if(response.status === 201) { //no players on team
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  86)       console.log("No Players On Team");
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  87)       callback();
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  88)     }
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  89)   })
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  90)   .catch(error => {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  91)     console.error(error);
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  92)     callback();
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  93)   })
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  94) }
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400  95) 
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400  96) let createPlayerCookie = function(id,callback)
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400  97) {
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400  98)   document.cookie = "PlayerCookie=" + id;
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400  99)   callback();
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 100) }
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 101) 
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 182)   edit_bt.addEventListener("click", function(){
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 183)     if(league_sport === "Flag_football"){
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 184)       createPlayerCookie(tableIds,() => {
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 185)         window.location.replace("edit_fb_stats.html");
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 186)       })
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 187)     }
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 188)     else if(league_sport === "Men_soccer"){
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 189)       createPlayerCookie(tableIds,() => {
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 190)         window.location.replace("edit_sc_stats.html");
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 191)       })
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 192)     }else{
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 193)       createPlayerCookie(tableIds,() => {
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 194)         window.location.replace("edit_sb_stats.html");
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 195)       })
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 196)     }
b54da3f1 (jlongmi9          2023-05-08 19:10:08 -0400 197)   });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 216) let getUserData = function (url,callback) {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 217)   console.log(url);
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 218)   fetch(url, {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 219)     method: 'GET',
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 220)     headers: {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 221)       'Content-Type': 'application/json'
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 222)     }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 223)   })
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 224)   .then(response => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 225)     if (response.ok) {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 226)       response.json().then(data => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 227)         setUserData(data, () => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 228)           console.log("User Data Set");
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 230)           const teamURL = 'http://127.0.0.1:5000/teams/' + data.teamID;
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 231)             if(data.teamID !== null) 
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 232)             {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 233)               getTeamData(teamURL, () => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 234)                 callback();
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 235)               });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 236)             }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 237)             else if(data.teamID === null && data.leagueID == null)
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 238)             {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 239)               let leagueNull;
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 240)               let teamNull; 
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 241)               setLeagueData(leagueNull, ()=> {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 242)                 callback();
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 243)               });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 244)               setTeamData(teamNull, ()=> {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 245)                 callback();
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 246)               });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 247)                 
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 248)               callback();
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 249)             }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 250)             else
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 251)             {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 252)               const leagueURL = 'http://127.0.0.1:5000/leagues/' + data.leagueID;
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 253)               getLeagueData(leagueURL, () => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 254)                 
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 255)                 callback();
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 256)               });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 257)             }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 258)         });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 259)       });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 260)     } 
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 261)     else {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 262)       console.error('Error: ' + response.statusText);
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 263)     }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 264)   })
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 265)   .catch(error => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 266)     console.error(error);
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 267)   });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 268) }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 269) 
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 270) let getTeamData = function (teamURL, callback) {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 271)   fetch(teamURL, {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 272)     method: 'GET',
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 273)     headers: {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 274)       'Content-Type': 'application/json'
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 275)   }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 276)   })
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 277)   .then(response => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 278)     if (response.ok) {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 279)       response.json().then(data => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 282)         teamId = data.id;
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 284)         const leagueURL = 'http://127.0.0.1:5000/leagues/' + data.p_id;
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 285)         getLeagueData(leagueURL, () => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 286)           callback();
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 287)         });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 288)       });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 289)     } 
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 290)     else {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 291)       console.error('Error: ' + response.statusText);
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 292)     }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 293)   })
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 294)   .catch(error => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 295)     console.error(error);
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 296)   });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 297) }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 298) 
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 299) let getLeagueData = function (leagueURL, callback) {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 300)   fetch(leagueURL, {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 301)     method: 'GET',
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 302)     headers: {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 303)       'Content-Type': 'application/json'
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 304)   }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 305)   })
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 306)   .then(response => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 307)     if (response.ok) {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 308)       response.json().then(data => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 311)         callback();
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 312)       });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 313)     } 
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 314)     else {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 315)       console.error('Error: ' + response.statusText);
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 316)     }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 317)   })
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 318)   .catch(error => {
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 319)     console.error(error);
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 320)   });
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 321) }
dd43809d (jlongmi9          2023-05-08 16:19:21 -0400 322) 
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 323) //load data from league_home...
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 324) let loadData = function () {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 325)   getSessionId((userURL) => {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 326)     console.log("URL: " + userURL);
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 327)     getUserData(userURL,() => {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 338)       console.log("All Data Set");
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 339)       const getPlayersURL = 'http://127.0.0.1:5000/players/get_players_on_team/' + teamId;
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 342)         console.log("Got Players");
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 343)       })
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 345)   });
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 346) };
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 348) loadData();
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 350) document.querySelector("#Log-Out").onclick = function(){
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 351)   logout(() => {
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 352)     window.location.replace("../home/index.html");
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 353)   });
310c5185 (jlongmi9          2023-05-05 19:13:42 -0400 354) }

Front-End/teams/view_teams.js 
^fc50d60 (jlongmi9          2023-04-25 21:43:27 -0400  21) //This should make it so the boxes don't jumble and get moved around when hoverd over
^fc50d60 (jlongmi9          2023-04-25 21:43:27 -0400  22) function expandBox(teamElement) {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  23)   const card = teamElement.querySelector('.dynprog-crd');
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  24)   card.style.height = "200px";
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  25) }
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400  26) 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  27) function collapseBox(teamElement) {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  28)   const card = teamElement.querySelector('.dynprog-crd');
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  29)   card.style.height = "100px";
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  30) }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  31) 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  32) const welcomeButton = document.querySelector("#welcome-button");
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  33) //Reference for username
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  34) let userNameHeading = document.getElementById("username");
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  35) let username = null;
^fc50d60 (jlongmi9          2023-04-25 21:43:27 -0400  36) 
^fc50d60 (jlongmi9          2023-04-25 21:43:27 -0400  58) 
^fc50d60 (jlongmi9          2023-04-25 21:43:27 -0400  64) 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  65) //GLOBALS
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  67) let leagueId;
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400  69) let UserId;
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400  70) let UserUsername;
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400  71) let UserPosition;
^fc50d60 (jlongmi9          2023-04-25 21:43:27 -0400  72) 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  75)   const cookies = document.cookie.split(';');
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  76)   const cookie = cookies.find(c => c.trim().startsWith('UserCookie'));
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  77)   userCookieId = cookie ? cookie.split('=')[1] : null;
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  79)   const sessionId = {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  80)     id: userCookieId
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  81)   }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  83)   const userURL = 'http://127.0.0.1:5000/users/' + sessionId.id;
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  85)   callback(userURL);
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  86) }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  87) 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  88) let getUserData = function (url,callback) {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  89)   fetch(url, {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  90)     method: 'GET',
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  91)     headers: {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  92)       'Content-Type': 'application/json'
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  94)   })
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  95)   .then(response => {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  96)     if (response.ok) {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  97)       response.json().then(data => {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400  98)         setUserData(data, () => {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 100)           UserId = data.id;
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 101)           UserUsername = data.username;
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 102)           UserPosition = data.pos;
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 103)           console.log("User Data Set");
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 104)           callback();
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 107)     } 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 108)     else 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 109)     {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 110)       console.error('Error: ' + response.statusText);
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 111)       callback();
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 112)     }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 113)   })
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 114)   .catch(error => {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 115)     console.error(error);
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 116)   });
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 117) }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 119) let getAllTeams = function(url,callback) {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 120)   fetch(url, {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 121)     method: 'GET',
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 122)     headers: {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 123)       'Content-Type': 'application/json'
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 124)     }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 125)   })
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 126)   .then(response => {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 127)     if (response.ok) {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 128)       response.json().then(data => {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 129)         callback(data);
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 130)       });
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 131)     } 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 132)     else 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 133)     {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 134)       console.error('Error: ' + response.statusText);
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 135)       callback();
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 136)     }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 137)   })
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 138)   .catch(error => {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 139)     console.error(error);
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 140)   });
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 141) }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 143) let loadData = function () {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 144)   getSessionId((userURL) => {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 145)     getUserData(userURL,() => {
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 146)       console.log("All Data Set");
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 147)       getAllURL = "http://127.0.0.1:5000/teams/get_team_in_league/" + leagueId;
03b5170d (jlongmi9          2023-05-07 18:56:05 -0400 148)       getAllTeams(getAllURL,(data) => {
03b5170d (jlongmi9          2023-05-07 18:56:05 -0400 150)         console.log(data);
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 151)       });
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 153)   });
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 154) };
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 162)     leagueId = userDataJSON.leagueID;
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 165) 
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 166) let logout = function(callback) {
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 167)   const cookies = document.cookie.split(";");
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 168) 
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 169)   cookies.forEach(cookie => {
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 170)     console.log(cookie)
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 171)     if (cookie.trim().startsWith("UserCookie")) {
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 173)       // Set the cookie's expiration date to a past date to delete it
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 174)       document.cookie = cookie.split("=")[0] + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 175)       console.log(document.cookie)
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 176)     }
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 177)   });
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 178) 
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 179)   const deleteSessionURL = 'http://127.0.0.1:5000/users/delete_session/' + userCookieId;
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 180) 
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 181)   fetch(deleteSessionURL, {
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 182)     method: 'DELETE'
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 183)   })
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 184)   .then(response => {
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 185)     if (response.ok) {
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 186)       console.log("Session Deleted");
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 187)       callback();
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 188)     } 
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 189)     else {
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 190)       console.error('Error: ' + response.statusText);
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 191)       callback();
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 192)     }
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 193)   })
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 194)   .catch(error => {
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 195)     console.error(error);
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 196)   });
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 197) }
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 198) 
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 199) let update_user_team = function(url,dataJSON,callback) {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 200)   fetch(url, {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 201)     method: 'PATCH',
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 202)     headers: {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 203)       'Content-Type': 'application/json'
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 204)     },
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 205)     body: JSON.stringify(dataJSON)
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 206)   })
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 207)   .then(response => {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 208)     if (response.ok) {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 209)       callback();
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 210)     } 
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 211)     else 
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 212)     {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 213)       console.error('Error: ' + response.statusText);
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 214)       callback();
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 215)     }
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 216)   })
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 217)   .catch(error => {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 218)     console.error(error);
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 219)   });
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 220) }
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 221) 
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 222) let create_player = function(url,dataJSON,callback) {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 223)   fetch(url, {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 224)     method: 'POST',
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 225)     headers: {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 226)       'Content-Type': 'application/json'
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 227)     },
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 228)     body: JSON.stringify(dataJSON)
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 229)   })
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 230)   .then(response => {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 231)     if (response.ok) {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 232)       callback();
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 233)     } 
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 234)     else 
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 235)     {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 236)       console.error('Error: ' + response.statusText);
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 237)       callback();
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 238)     }
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 239)   })
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 240)   .catch(error => {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 241)     console.error(error);
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 242)   });
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 243) }
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 244) 
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 259)   ids = teamDataJSON.ids;
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 265)     const tableIds = ids[i];
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 287)             const tUrl = 'http://127.0.0.1:5000/users/update_team/' + UserId;
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 288)             const pUrl = 'http://127.0.0.1:5000/players';
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 289)             const teamData = {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 290)               teamId: tableIds
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 291)             }
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 292)             console.log(teamID);
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 293)             const playerData = {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 294)               username: UserUsername,
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 295)               teamId: tableIds,
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 296)               pos: UserPosition,
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 297)               userId: UserId
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 298)             }
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 299)             update_user_team(tUrl,teamData,() => {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 300)               create_player(pUrl,playerData,() => {
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 301)                 window.location.replace("team_home.html");
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 302)               })
363bf311 (jlongmi9          2023-05-07 20:39:03 -0400 303)             })
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 327)     }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 328)     callback();
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 333) document.querySelector("#Log-Out").onclick = function(){
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 334)   logout(() => {
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 335)     window.location.replace("../home/index.html");
e05ff6d8 (jlongmi9          2023-04-30 20:19:00 -0400 336)   });
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 337) }
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 338) 
412041e8 (jlongmi9          2023-05-04 22:06:45 -0400 339) loadData();

Front-End/users/login.js 
72504f28 (jlongmi9 2023-05-07 19:51:28 -0400 74)       else
72504f28 (jlongmi9 2023-05-07 19:51:28 -0400 75)       {
72504f28 (jlongmi9 2023-05-07 19:51:28 -0400 76)         window.location.replace("../error.html");
72504f28 (jlongmi9 2023-05-07 19:51:28 -0400 77)       }
72504f28 (jlongmi9 2023-05-07 19:51:28 -0400 86)     window.location.replace("../error.html");
363bf311 (jlongmi9 2023-05-07 20:39:03 -0400 90) //Event listener for when user clicks the button
363bf311 (jlongmi9 2023-05-07 20:39:03 -0400 91) loginBT.addEventListener('click', () =>{
363bf311 (jlongmi9 2023-05-07 20:39:03 -0400 92)   loginUser();
363bf311 (jlongmi9 2023-05-07 20:39:03 -0400 93) });

Front-End/users/profile.js 
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400   1) let userCookieId;
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400  19) 
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400  24)   userCookieId = cookie ? cookie.split('=')[1] : null;
e2503163 (jlongmi9          2023-05-01 22:57:40 -0400  56)             else if(data.teamID === null && data.leagueID == null)
e2503163 (jlongmi9          2023-05-01 22:57:40 -0400  69)             else
e2503163 (jlongmi9          2023-05-01 22:57:40 -0400  70)             {
e2503163 (jlongmi9          2023-05-01 22:57:40 -0400  71)               const leagueURL = 'http://127.0.0.1:5000/leagues/' + data.leagueID;
e2503163 (jlongmi9          2023-05-01 22:57:40 -0400  72)               getLeagueData(leagueURL, () => {
25f4ba7f (jlongmi9          2023-05-02 11:34:29 -0400  73)                 
e2503163 (jlongmi9          2023-05-01 22:57:40 -0400  74)                 callback();
e2503163 (jlongmi9          2023-05-01 22:57:40 -0400  75)               });
e2503163 (jlongmi9          2023-05-01 22:57:40 -0400  79)             }
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 263)   const deleteSessionURL = 'http://127.0.0.1:5000/users/delete_session/' + userCookieId;
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 264) 
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 265)   fetch(deleteSessionURL, {
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 266)     method: 'DELETE'
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 267)   })
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 268)   .then(response => {
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 269)     if (response.ok) {
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 270)       console.log("Session Deleted");
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 271)       callback();
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 272)     } 
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 273)     else {
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 274)       console.error('Error: ' + response.statusText);
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 275)       callback();
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 276)     }
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 277)   })
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 278)   .catch(error => {
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 279)     console.error(error);
5d031e7f (jlongmi9          2023-04-28 19:32:51 -0400 280)   });

Front-End/users/set_up_profile.js 
696ad39a (jlongmi9          2023-05-04 09:41:11 -0400  77)     let numOfInputs = getNumOfInputs(); //get number of fields that the user entered
696ad39a (jlongmi9          2023-05-04 09:41:11 -0400  78)     getSessionId((url) => { //get user from session store to get user ID
696ad39a (jlongmi9          2023-05-04 09:41:11 -0400  79)         getUserData(url, (id) => { //get user ID
696ad39a (jlongmi9          2023-05-04 09:41:11 -0400  80)             waitOnRequest(numOfInputs,id).then(() => {  //make patch requests until the number of fields match proccessed, returning when all requests have been made
696ad39a (jlongmi9          2023-05-04 09:41:11 -0400  81)                 window.location.replace("profile.html"); //take back to profile page
325b02c0 (jlongmi9          2023-05-04 09:48:46 -0400 141)         if(numOfInputs === proccessed) resolve(); //if zero fields were updated
325b02c0 (jlongmi9          2023-05-04 09:48:46 -0400 142)         if(first_name.value !== "") //if the field is filled in
325b02c0 (jlongmi9          2023-05-04 09:48:46 -0400 145)                 fn: first_name.value   //get the value entered
325b02c0 (jlongmi9          2023-05-04 09:48:46 -0400 147)             const updateFNUrl = 'http://127.0.0.1:5000/users/update_firstname/' + userID;  //construct patch URL
325b02c0 (jlongmi9          2023-05-04 09:48:46 -0400 148)             makeRequest(fn,updateFNUrl, () => {  //make the patch request, see makeRequest function
325b02c0 (jlongmi9          2023-05-04 09:48:46 -0400 149)                 proccessed += 1;                  //increment the number of proccessed requests
325b02c0 (jlongmi9          2023-05-04 09:48:46 -0400 150)                 if(proccessed === numOfInputs) resolve();   //if the number proccessed equals number inputted, all requests processed, return
